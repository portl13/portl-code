
com.portl.integrations {
  bandsintown.token = ""
  eventbrite.token = ""
  songkick.token = ""
  meetup {
    token = ""
    // do not run MeetupService.MeetupFeedCollector on startup
    autoStartFeed = false
  }
  ticketmaster.token = ""

  opencage {
    token = ""
    rateLimitPerDay = 20000
    rateLimitPerSecond = 12
  }
}

mongodb {
  host = localhost
  port = 27017
  dbs {
    main = portlAdmin
    data = portl

    bandsintown = bandsintown
    eventbrite = eventbrite
    meetup = meetup
    ticketmaster = ticketmaster
    songkick = songkick
    ticketfly = ticketfly

    backgroundTasks = backgroundTasks
  }
  baseUri = "mongodb://"${mongodb.host}":"${mongodb.port}"/"
  uriParams = ""
  replicaSet=""
  uri = ${mongodb.baseUri}${mongodb.dbs.main}${mongodb.uriParams}
  data.uri = ${mongodb.baseUri}${mongodb.dbs.data}${mongodb.uriParams}
  bandsintown.uri = ${mongodb.baseUri}${mongodb.dbs.bandsintown}${mongodb.uriParams}
  eventbrite.uri = ${mongodb.baseUri}${mongodb.dbs.eventbrite}${mongodb.uriParams}
  meetup.uri = ${mongodb.baseUri}${mongodb.dbs.meetup}${mongodb.uriParams}
  ticketmaster.uri = ${mongodb.baseUri}${mongodb.dbs.ticketmaster}${mongodb.uriParams}
  songkick.uri = ${mongodb.baseUri}${mongodb.dbs.songkick}${mongodb.uriParams}
  ticketfly.uri = ${mongodb.baseUri}${mongodb.dbs.ticketfly}${mongodb.uriParams}
  backgroundTasks.uri = ${mongodb.baseUri}${mongodb.dbs.backgroundTasks}${mongodb.uriParams}
}

// AWS S3 for media uploads
s3.region = us-west-2
s3.bucketName = ""
cloudfront.baseUrl = ""
